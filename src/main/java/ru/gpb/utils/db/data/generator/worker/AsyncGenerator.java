package ru.gpb.utils.db.data.generator.worker;
// 2018.08.06 

import ru.gpb.utils.db.data.generator.timer.Metronome;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.*;
import java.util.logging.Logger;


/**
 * @author Boris Zhguchev
 *
 * Class for processing data in different threads.
 * it needed terminal operation @see {@link AsyncGenerator#log()}
 * or @see {@link AsyncGenerator#report()}
 * or @see {@link AsyncGenerator#finish()}
 *
 */
public class AsyncGenerator extends Generator {
  AsyncGenerator(DatabaseEntityRelationsGenerator multiEntityGenerator,
                 DatabaseEntityGenerator singleEntityGenerator,
                 Generator initGen) {
    super(multiEntityGenerator, singleEntityGenerator);
    this.inner = initGen;
    this.executor = Executors.newFixedThreadPool(10);
    this.workers = new ArrayList<>();
  }

  AsyncGenerator(DatabaseEntityRelationsGenerator multiEntityGenerator,
                 DatabaseEntityGenerator singleEntityGenerator,
                 Generator initGen, int nThreads) {
    super(multiEntityGenerator, singleEntityGenerator);
    this.inner = initGen;
    this.executor = Executors.newFixedThreadPool(nThreads);
    this.workers = new ArrayList<>();
  }

  private Logger LOGGER = Logger.getLogger(AsyncGenerator.class.getName());

  private Generator inner;
  private List<Future<? extends Generator>> workers;
  private ExecutorService executor;


  /**
   * throw on next stage saved exception.
   *
   * @throws DataGenerationException for processing it on next stage
   */

  @Override
  public Generator withException() throws DataGenerationException {
    for (Future<? extends Generator> genFuture : workers) {
      try {
        Generator gen = genFuture.get();
        if (Objects.nonNull(gen.lastExeption())) {
          close();
          return gen.withException();
        }
      } catch (InterruptedException | ExecutionException e) {
        throw new DataGenerationException(e);
      }
    }

    return this;
  }

  /**
   *
   * @return InnerCache singleton;
   *
   * */

  @Override
  public InnerCache cache() {
    for (Future<? extends Generator> genFuture : workers) {
      try {
        Generator gen = genFuture.get();
      } catch (InterruptedException | ExecutionException e) {
        LOGGER.finest("while calculate cache =>  exception +"+e.toString());
      }
    }
    close();
    return inner.cache();
  }



  /**
   *
   * @return InnerLog instance;
   *
   * */
  @Override
  public InnerLog log() {
    InnerLog log = inner.log();
    for (Future<? extends Generator> genFuture : workers) {
      try {
        Generator gen = genFuture.get();
        log = new InnerLog(gen.log());
      } catch (InterruptedException | ExecutionException e) {
        LOGGER.finest("while calculate log =>  exception +"+e.toString());
      }
    }
    close();
    return log;
  }


  /**
   *
   * @return report @see {@link InnerLog#toString()};
   *
   * */
  @Override
  public String report() {
    StringBuilder sb = new StringBuilder();
    for (Future<? extends Generator> genFuture : workers) {
      try {
        sb.append(genFuture.get().report());
        sb.append(System.lineSeparator());
      } catch (InterruptedException | ExecutionException e) {
        LOGGER.finest("while calculate report from log =>  exception +"+e.toString());
      }
    }
    close();
    return sb.toString();
  }

  /**
   *
   * @return last exception from first command;
   *
   * */
  @Override
  public Exception lastExeption() {
    for (Future<? extends Generator> genFuture : workers) {
      try {
        Generator gen = genFuture.get();
        if (Objects.nonNull(gen.lastExeption())) {
          return gen.lastExeption();
        }
      } catch (InterruptedException | ExecutionException e) {
        LOGGER.finest("while calculate last exeption =>  exception +"+e.toString());
      }
    }
    close();
    return inner.lastExeption();
  }

  /**
   * Generate new instance for Class.
   * It tries to find this {@link MetaDataList#byClass(Class)}
   * Then it construct entity and relations.
   *
   * @param cl class for searching. Must have {@link javax.persistence.Entity} annotation.
   */
  @Override
  public Generator generateBy(Class<?> cl) {
    LOGGER.fine("generated by "+ cl.getName());
    Generator splittedGenerator = this.inner.split();
    workers.add(executor.submit(() -> splittedGenerator.generateBy(cl)));
    return this;
  }

  /**
   * Generate new instance for Class based on table name(schema.table)
   * It tries to find this {@link MetaDataList#bySchemaTable(String, String)}}
   * Then it construct entity and relations.
   *
   * @param schema sch for searching. Must be present in {@link javax.persistence.Table} annotation.
   * @param table  sch for searching. Must be present in {@link javax.persistence.Table} annotation.
   */
  @Override
  public Generator generateBy(String schema, String table) {
    LOGGER.finest("generated by "+ schema+"."+table);

    Generator splittedGenerator = this.inner.split();
    Future<Generator> submittedGenerator = executor.submit(() -> splittedGenerator.generateBy(schema, table));
    workers.add(submittedGenerator);
    return this;
  }

  /**
   * Generate new instance and relations for all founded Class
   **/
  @Override
  public Generator generateAll() {
    LOGGER.finest("generated all");
    return inner.generateAll();
  }


  /**
   * generate all instances except m2m relations.
   */
  @Override
  public Generator generateObjects() {
    LOGGER.finest("generated all objects");

    return inner.generateObjects();
  }

  /**
   * generate all relations except generating instances.
   * They can be found in the cache {@link InnerCache}
   */
  @Override
  public Generator generateRelations() {
    LOGGER.finest("generated all relations");
    return inner.generateRelations();
  }

  /**
   * Making new {@link RepeatableGenerator} for generating repeated events
   *
   * @param cycles - cycles for repeate
   */
  @Override
  public Generator repeate(int cycles) {
    this.inner = super.repeate(cycles);
    LOGGER.finest("repeate "+cycles+" times");
    return this;
  }

  /**
   * Making new {@link MetronomeGenerator} for generating repeated events with special pauses.
   * Ihis method uses default implementation for Metronome @see {@link Metronome#systemParker(long, TimeUnit)}
   *
   * @param period metronome period
   * @param metric {@link TimeUnit} metric
   */
  @Override
  public Generator metronome(long period, TimeUnit metric) {
    this.inner = super.metronome(period, metric);
    LOGGER.finest("metronome "+ period + " "+metric.name());
    return this;
  }

  /**
   * Making new {@link MetronomeGenerator} for generating repeated events with special pauses.
   * Ihis method uses default implementation for Metronome @see {@link Metronome#systemParker(long, TimeUnit)}
   *
   * @param period metronome period
   * @param metric {@link TimeUnit} metric
   * @param predicate condition for stopping generator @see {@link ru.gpb.utils.db.data.generator.worker.MetronomeGenerator.MetronomePredicate}
   */
  @Override
  public Generator metronome(long period, TimeUnit metric, MetronomeGenerator.MetronomePredicate predicate) {
    this.inner = super.metronome(period, metric, predicate);
    LOGGER.finest("metronome "+ period + " "+metric.name() +" with predicate ");
    return this;
  }

  /**
   * set startId for default id generator(incrementing from 0 by default).
   *
   * If annotation Id has no annotation GeneratedValue a generator will be generate id from sequence
   * by incrementing numbers or making random values from UUID or String
   *
   * @param val initial value for generating id.
   *
   * */
  @Override
  public Generator startId(long val) {
    LOGGER.finest("set start id = "+val);
    return inner.startId(val);
  }


  /**
   * Making new {@link AsyncGenerator} for generating repeated events with special pauses.
   * @return this
   *
   */
  @Override
  public Generator async() {
    return this;
  }

  /**
   * Making new {@link AsyncGenerator} for generating repeated events with special pauses.
   * @param nThreads - thread count for using by  generator
   * @return this
   *
   */
  @Override
  public Generator async(int nThreads) {
    return this;
  }


  private void close(){
    executor.shutdown();
    try {
      if (!executor.awaitTermination(2, TimeUnit.SECONDS)) {
        executor.shutdownNow();
      }
    } catch (InterruptedException e) {
      executor.shutdownNow();
    }
  }

  /**
   * terminal operation. It waits all futures completed.
   *
   * @return this
   * */
  @Override
  public Generator finish(){
    for (Future<? extends Generator> worker : workers) {
      try {
        worker.get();
      } catch (InterruptedException | ExecutionException e) {}
    }
    close();
    return inner;
  }

  @Override
  Generator split() {
    throw new IllegalStateGeneratorException(" It can't possible invoking async for async generator.  ");
  }



}
